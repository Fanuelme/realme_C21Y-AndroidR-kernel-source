name: Kernel Build

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      defconfig:
        description: 'Kernel defconfig name (e.g., rmx3263_defconfig)'
        required: true
        default: 'rmx3263_defconfig'

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      # General Build Variables
      KERNEL_ROOT: ${{ github.workspace }}
      ARCH: arm64
      KBUILD_BUILD_USER: '@ravindu644'
      
      # Ccache Flags
      USE_CCACHE: 1
      CCACHE_EXEC: /usr/bin/ccache

      # Toolchain Paths
      CLANG_BASE: ${{ github.workspace }}/toolchains/clang-r383902b
      GCC_64_BASE: ${{ github.workspace }}/toolchains/aarch64
      GCC_32_BASE: ${{ github.workspace }}/toolchains/arm

      # Main Compiler and Cross-Compile Variables
      CC: ccache clang
      CROSS_COMPILE: ${{ github.workspace }}/toolchains/aarch64/bin/aarch64-linux-android-
      CROSS_COMPILE_ARM32: ${{ github.workspace }}/toolchains/arm/bin/arm-linux-androideabi-
      
      # UNISOC Board-Specific Properties (used by Makefiles)
      BSP_BUILD_DT_OVERLAY: "y"
      BSP_BUILD_ANDROID_OS: "y"
      BSP_BUILD_FAMILY: "sharkl5Pro"
      BSP_BOARD_CAMERA_MODULE_ISP_VERSION: "isp2.6"
      BSP_BOARD_CAMERA_MODULE_CSI_VERSION: "csi_2.0"
      BSP_BOARD_CAMERA_MODULE_ISP_ADAPT_VERSION: "sharkl5pro"
      BSP_BOARD_NAME: "sharkl5pro"
      BSP_BOARD_CAMERA_MODULE_VDSP_DEVICE: "Cadence"
      BSP_BOARD_UNISOC_WCN_SOCKET: "sdio"
      BSP_BOARD_WLAN_DEVICE: "sc2355"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Create build directories
        run: |
          mkdir -p "${{ github.workspace }}/out" "${{ github.workspace }}/build" "${{ github.workspace }}/toolchains" "${{ github.workspace }}/modules_out"

      - name: Cache Toolchains
        id: cache-toolchains
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/toolchains
          key: ${{ runner.os }}-toolchains-lineage-v1

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-ccache-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-ccache-

      - name: Setup System Dependencies
        run: |
          echo "[INFO]: Installing system requirements..."
          sudo apt-get update
          sudo apt-get install -y --fix-missing \
            git device-tree-compiler lz4 xz-utils zlib1g-dev zip make gcc g++ \
            python3 python-is-python3 libncurses-dev flex bison gperf libssl-dev \
            libelf-dev kmod pahole zstd libyaml-dev ccache

      - name: Download and Set up Toolchains
        if: steps.cache-toolchains.outputs.cache-hit != 'true'
        run: |
          echo "[INFO] Setting up Toolchains..."
          cd "${{ github.workspace }}/toolchains"
          
          echo "--> Cloning Clang..."
          mkdir -p clang-r383902b
          wget -q https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/0e9e7035bf8ad42437c6156e5950eab13655b26c/clang-r383902b.tar.gz -O clang.tar.gz
          tar -xf clang.tar.gz -C clang-r383902b && rm clang.tar.gz
          
          echo "--> Cloning aarch64 GCC..."
          git clone --depth=1 https://github.com/rifsxd/android_prebuilts_gcc_linux-x86_aarch64_aarch64-linux-android-4.9 -b lineage-19.1 aarch64

          echo "--> Cloning arm GCC..."
          git clone --depth=1 https://github.com/rifsxd/android_prebuilts_gcc_linux-x86_arm_arm-linux-androideabi-4.9 -b lineage-19.1 arm

          echo "--> Setting permissions..."
          chmod +x ${{ env.CLANG_BASE }}/bin/*
          chmod +x ${{ env.GCC_64_BASE }}/bin/*
          chmod +x ${{ env.GCC_32_BASE }}/bin/*

      - name: Set up PATH and ccache
        run: |
          echo "${{ env.CLANG_BASE }}/bin" >> $GITHUB_PATH
          echo "${{ env.GCC_64_BASE }}/bin" >> $GITHUB_PATH
          echo "${{ env.GCC_32_BASE }}/bin" >> $GITHUB_PATH
          
          echo "[INFO] Configuring ccache..."
          ccache -M 5G
          ccache -z

      - name: Build Kernel and In-Tree Modules
        run: |
          echo -e "\n[INFO]: KERNEL BUILD STARTED..!\n"
          
          make -C "${{ github.workspace }}" O="${{ github.workspace }}/out" ARCH=${{ env.ARCH }} ${{ inputs.defconfig }} || exit 1
            
          make -C "${{ github.workspace }}" \
            O="${{ github.workspace }}/out" \
            -j$(nproc) \
            ARCH=${{ env.ARCH }} \
            CC=${{ env.CC }} \
            LD=ld.lld \
            AR=llvm-ar \
            NM=llvm-nm \
            OBJCOPY=llvm-objcopy \
            OBJDUMP=llvm-objdump \
            STRIP=llvm-strip \
            CROSS_COMPILE=${{ env.CROSS_COMPILE }} \
            CROSS_COMPILE_ARM32=${{ env.CROSS_COMPILE_ARM32 }} \
            CLANG_TRIPLE=aarch64-linux-gnu- \
            BSP_BUILD_ANDROID_OS=${{ env.BSP_BUILD_ANDROID_OS }} \
            BSP_BUILD_FAMILY=${{ env.BSP_BUILD_FAMILY }} \
            BSP_BUILD_DT_OVERLAY=${{ env.BSP_BUILD_DT_OVERLAY }} \
            CONFIG_MALI_PLATFORM_NAME=${{ env.BSP_BOARD_NAME }} \
            CONFIG_MALI_BOARD_PLATFORM=${{ env.BSP_BOARD_NAME }} \
            BSP_BOARD_CAMERA_MODULE_VDSP_DEVICE=${{ env.BSP_BOARD_CAMERA_MODULE_VDSP_DEVICE }} \
            BSP_BOARD_UNISOC_WCN_SOCKET=${{ env.BSP_BOARD_UNISOC_WCN_SOCKET }} \
            BSP_BOARD_WLAN_DEVICE=${{ env.BSP_BOARD_WLAN_DEVICE }} \
            Image modules || exit 1

          echo -e "\n[INFO]: KERNEL BUILD FINISHED..!"
          ccache -s

      - name: Install In-Tree Kernel Modules
        run: |
          echo "[INFO]: Installing in-tree kernel modules..."
          make -C "${{ github.workspace }}/out" \
            ARCH=${{ env.ARCH }} \
            INSTALL_MOD_PATH="${{ github.workspace }}/modules_out" \
            modules_install || exit 1

      - name: Build and Install Out-of-Tree Modules
        run: |
          echo "[INFO]: Checking for and building known out-of-tree modules..."
          
          # --- TCS3430 Sensor Driver ---
          TCS_DRIVER_PATH="${{ github.workspace }}/drivers/modules/kernel4.14/input/misc/tcs3430"
          if [ -f "$TCS_DRIVER_PATH/Makefile" ]; then
            echo "--> Found TCS3430 Makefile, building..."
            export BSP_KERNEL_PATH="${{ github.workspace }}/out"
            export BSP_MODULES_OUT="${{ github.workspace }}/out"
            make -C "$TCS_DRIVER_PATH" modules
            make -C "${{ github.workspace }}/out" M="$BSP_MODULES_OUT/tcs3430" INSTALL_MOD_PATH="${{ github.workspace }}/modules_out" modules_install
            echo "--> TCS3430 driver installed."
          else
            echo "--> TCS3430 Makefile not found, skipping."
          fi

      - name: Package Kernel and All Modules
        run: |
          echo "[INFO]: Packaging kernel artifacts..."
          cp "${{ github.workspace }}/out/arch/${{ env.ARCH }}/boot/Image" "${{ github.workspace }}/build/Image"
          
          cd "${{ github.workspace }}/modules_out"
          
          echo "[INFO]: Removing 'source' and 'build' symlinks to prevent zip recursion..."
          find . -type l -name "source" -delete
          find . -type l -name "build" -delete
          
          echo "[INFO]: Zipping all modules..."
          zip -r9 "${{ github.workspace }}/build/modules-${{ github.run_id }}.zip" .
          
          echo "Kernel Image and Modules ZIP are ready in the 'build' directory."
          ls -lR ${{ github.workspace }}/build

      - name: Upload Kernel Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-build-${{ github.run_id }}
          path: ${{ github.workspace }}/build/*
          retention-days: 7
